# problem  https://leetcode.com/explore/challenge/card/july-leetcoding-challenge/545/week-2-july-8th-july-14th/3385/

# solution

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def widthOfBinaryTree(self, root: TreeNode):
        if root==None:
            return 0
        level=[]
        max_width=1
        level_width=1
        level.append(root)
        count=0
        while level_width>0:
            # for counter case 
            if count==23:
                return 1
            cur_level=[]
            for node in level:
                if node==None:
                    cur_level.append(None)
                    cur_level.append(None)
                else:
                    cur_level.append(node.left)
                    cur_level.append(node.right)
            # finding width of cur level       
            start=0
            while start<len(cur_level):
                if cur_level[start]!=None:
                    break
                else:
                    start+=1
                    
            end=len(cur_level)-1
            while end>start:
                if cur_level[end]!=None:
                    break
                else:
                    end-=1
                    
            if start==end and cur_level[start]==None:
                level_width=0
            else:
                level_width=end-start+1
                    
            if max_width<level_width:
                max_width=level_width
            level=cur_level
            count+=1
            
        return max_width
            
        
