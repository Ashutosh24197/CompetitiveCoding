// problem https://leetcode.com/problems/game-of-life

// Solution 

class Solution {
    public void gameOfLife(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int count=0;
                //check neighbors
                if(i-1>=0 && j-1>=0 && (board[i-1][j-1]==1 || board[i-1][j-1]==-1)){
                    count+=1;
                }
                if(i-1>=0&& (board[i-1][j]==1 || board[i-1][j]==-1)){
                    count+=1;
                }
                if(i-1>=0 && j+1<m && (board[i-1][j+1]==1 || board[i-1][j+1]==-1)){
                    count+=1;
                }
                if(j-1>=0 && (board[i][j-1]==1 || board[i][j-1]==-1)){
                    count+=1;
                }
                if(j+1<m && (board[i][j+1]==1 || board[i][j+1]==-1)){
                    count+=1;
                }
                if(i+1<n && j-1>=0 && (board[i+1][j-1]==1 || board[i+1][j-1]==-1)){
                    count+=1;
                }
                if(i+1<n && (board[i+1][j]==1 || board[i+1][j]==1)){
                    count+=1;
                }
                if(i+1<n && j+1<m && (board[i+1][j+1]==1 || board[i+1][j+1]==1)){
                    count+=1;
                }
                
                if(board[i][j]==1){
                    if(count<2 || count>3){
                        board[i][j]=-1;
                    }
                }else{
                     if(count==3){
                        board[i][j]=2;
                    }
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]==-1){
                    board[i][j]=0;
                }else if(board[i][j]==2){
                    board[i][j]=1;
                }
            }
        }
       
    }
}
